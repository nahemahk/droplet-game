plugins {
    id 'org.beryx.runtime' version '1.13.0'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        java { srcDirs = ['src/'] }
        resources { srcDirs = ['../assets'] }
    }
}

application { mainClassName = 'hk.nahema.dropletgame.DesktopLauncher' }

def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
project.ext.assetsDir = new File('../assets')

tasks.register('rungame', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        jvmArgs += '-XstartOnFirstThread'
    }
}

tasks.register('debug', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

tasks.register('dist', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest { attributes 'Main-Class': project.mainClassName }
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    destinationDirectory = layout.buildDirectory.dir('lib')
    archiveFileName.set(appName + '.jar')
    doLast { file(archiveFile).setExecutable(true, false) }
}

shadowJar {
    manifest { attributes 'Main-Class': project.mainClassName }
    destinationDirectory = layout.buildDirectory.dir('lib')
    archiveFileName.set(appName + '.jar')
    
    exclude "**/*.git"
    exclude "**/*.sha1"
    
    exclude "**/*arm.so"
    exclude "**/linux/arm32/**"
    exclude "**/META-INF/maven/**"
    exclude "**/META-INF/native-image/**"
    //if (osName.startsWith("win")) {
    //    exclude "**/*.so"
	//	exclude "**/*.dylib"
    //} else if (osName.contains("linux")) {
    //    exclude "**/*.dll"
	//exclude "**/*.dylib"
    //} else if (osName.contains("mac")) {
    //    exclude "**/*.dll"
	//	exclude "**/*.so"
    //}
    
    minimize()
    doLast { file(archiveFile).setExecutable(true, false) }
}

jpackageImage.dependsOn shadowJar
dist.dependsOn classes

tasks.jpackageImage.doNotTrackState('This task both reads from and writes to the build folder.')

runtime {
    options = [
        '--strip-debug',
        '--compress', '1',
        '--no-header-files',
        '--no-man-pages',
        '--strip-native-commands',
        '--vm', 'server'
    ]
    modules = ['jdk.unsupported']
    distDir.set(file(project.layout.buildDirectory))
    jpackage {
        imageName = appName
        mainJar = appName + '.jar'
        if (osName.contains('windows')) {
            imageOptions = ['--icon', file('icons/windows.ico')]
        } else if (osName.contains('linux')) {
            imageOptions = ['--icon', file('icons/linux.png')]
        } else if (osName.contains('mac')) {
            imageOptions = ['--icon', 'icons/macos.icns', '--java-options', '"-XstartOnFirstThread"']
        }
    }
}

eclipse.project.name = appName + '-desktop'
